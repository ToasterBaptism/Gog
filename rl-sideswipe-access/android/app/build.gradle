apply plugin: "com.android.application"
// AI backend isolation via product flavors: 'stub' (default) and 'tflite'.

apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // Force bundling in debug for standalone APK
    debuggableVariants = []

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.rlsideswipe.access"
    defaultConfig {
        applicationId "com.rlsideswipe.access"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 14
        versionName "2.21-OPENCV-ENHANCED"
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    flavorDimensions "aiBackend"
    productFlavors {
        stub {
            dimension "aiBackend"
        }
        tflite {
            dimension "aiBackend"
        }
    }

    // Configure APK naming with version and flavor to prevent collisions
    applicationVariants.all { variant ->
        variant.outputs.all {
            def versionName = variant.versionName
            def buildType = variant.buildType.name
            def flavorName = variant.flavorName ?: "default"
            outputFileName = "RL-Sideswipe-Access-v${versionName}-${flavorName}-${buildType}.apk"
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.core:core-ktx:1.13.1"
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "com.google.android.material:material:1.12.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.8.4"
    implementation "androidx.activity:activity-ktx:1.9.1"
    
    // AI backends isolated via flavors. Default 'stub' flavor includes no ML deps.
    stubImplementation "androidx.annotation:annotation:1.8.2"
    // Optional TF Lite/MediaPipe deps only in the 'tflite' flavor.
    tfliteImplementation "org.tensorflow:tensorflow-lite:2.13.0"
    tfliteImplementation "org.tensorflow:tensorflow-lite-support:0.4.4"
    tfliteImplementation "com.google.mediapipe:tasks-vision:0.10.14"

    // Audio
    implementation "androidx.media:media:1.7.0"

    implementation("com.facebook.react:react-android")
    // In case MediaPipe is not used at runtime, keep it here only if required


    // Manual React Native module dependencies - autolinking disabled
    implementation project(':react-native-permissions')
    implementation project(':react-native-vector-icons')

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        // Explicit JSC dependency to avoid undefined jscFlavor
        implementation "org.webkit:android-jsc:+"
    }
}

// Task to clean up autolinking generated files
task cleanAutolinking {
    doLast {
        delete fileTree(dir: "$buildDir/generated/autolinking", include: '**/*')
    }
}

// Run once before building sources
tasks.named("preBuild") {
    dependsOn(cleanAutolinking)
}